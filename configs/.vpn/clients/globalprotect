#!/bin/bash

set -o errexit -o pipefail -o noclobber -o nounset

USAGE="Usage: $0 [-u string] [-p string] [-t string,string] (up|down|status|help) connection

where:
  -u|--user       User name
  -p|--password   Password
  -t|--tokens     Comma separated list of OTPs
"

# ensure running as root
if [ "$(id -u)" != "0" ]; then
  exec sudo "$0" "$@"
fi

# -allow a command to fail with !’s side effect on errexit
# -use return value from ${PIPESTATUS[0]}, because ! hosed $?
! getopt --test > /dev/null
if [[ ${PIPESTATUS[0]} -ne 4 ]]; then
    echo 'I’m sorry, `getopt --test` failed in this environment.'
    exit 1
fi

OPTIONS=u:p:t:
LONGOPTS=user:,password:,tokens:

# -regarding ! and PIPESTATUS see above
# -temporarily store output to be able to check for errors
# -activate quoting/enhanced mode (e.g. by writing out “--options”)
# -pass arguments only via   -- "$@"   to separate them correctly
! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")
if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
    # e.g. return value is 1
    #  then getopt has complained about wrong arguments to stdout
    exit 2
fi
# read getopt’s output this way to handle the quoting right:
eval set -- "$PARSED"

while true; do
  case "$1" in
    -u|--user)
      user="$2"
      shift 2
      ;;
    -p|--password)
      password="$2"
      shift 2
      ;;
    -t|--tokens)
      tokens="$2"
      shift 2
      ;;
    --)
      shift
      break
      ;;
    *)
      echo "Programming error"
      exit 3
      ;;
  esac
done

if (( "$#" < 2 )); then
  echo "2 positional arguments required" 1>&2
	echo "$USAGE"
	exit 1
fi

state_dir=$(dirname "$0")/../state
pid_file="${state_dir}/globalprotect_$2.pid"

action="$1"
shift

case "${action}" in
  'up')
    if [[ -z ${user+x} || -z ${password+x} ]]; then
      echo "Missing required parameters" 1>&2
      echo "$USAGE"
      exit 1
    fi
    if [[ -z ${tokens+x} ]]; then
      pwd_str="${password}"
    else
      IFS=',' read -ra tokens <<< "$tokens"
      pwd_str=""
      for t in "${tokens[@]}"; do
        pwd_str="${pwd_str}${password}${t}\n"
      done
    fi
    endpoint="$1"
    shift
    printf "$pwd_str" | openconnect --protocol=gp -b --non-inter --passwd-on-stdin --pid-file="$pid_file" -u "$user" "$@" "$endpoint" 1>&2
    ;;
  'down')
    kill -INT $(cat "$pid_file")
    ;;
  'status')
    if [[ -f "$pid_file" ]]; then
      echo "up"
    else
      echo "down"
    fi
  ;;
'help')
  echo "$USAGE"
  exit 1
  ;;
esac
